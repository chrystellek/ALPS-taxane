---
title: "Notebook"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

Project: Using ALPS for taxane metabolic pathway and breast cancer recurrence

Author: Chrystelle Kiang

Last updated: August 2, 2024

```{r}
#| echo: true
#| warning: false

# set up
library(here)
library(tidyverse)
# for ALPS:
library(ape)
library(phytools)
library(geiger)
library(data.table)
library(stringr)
# other 
library(survival)
library(ggplot2)
library(gtsummary)
library(gt)
```

### Prior forest

After discussion with Cathrine, Dee, Tore, Tom, and Tim, we have the following pathway as of end of Nov 2023. To consider *SLCO1B1* and *ABCB1* haplotypes. Most genes only have one SNP, except: *SLCO1B1* (2), *CYP3A4* (2), and *ABCB1* (4).

![](images/taxanepathway.jpg){fig-align="center"}

Want to encode the direct paths between two 'nodes'; either 1 or 2 steps (based on tam). Examples:\
(1,1): docetaxel -\> (1,1) -\> docetaxel in liver\
(1,3): docetaxel -\> (1,1) -\> docetaxel in liver -\> (3,3) -\> metabolite in liver\
(3,3): docetaxel in liver -\> (3,3) -\> metabolite in liver\
(3,5): docetaxel in liver -\> (3,3) -\> metabolite -\> (5,5) -\> plasma concentration

Decision is no haplotypes for this project; could perhaps be done later but would be more involved because we don't have chromosome level info. But to be done, it might involve changing what the aliases represent where instead of individual rs they could be combinations.

Trying out with scrambled data, but changed the names to match our study SNPs and only kept those.

```{r}
#| label: read-csvs
#| warning: false
#| message: false
#| results: hide

# import prior forest, created in: ./create prior.qmd
prior_forest <- read_csv("./data/priorforest.csv", show_col_types = FALSE)
prior.forest <- subset(prior_forest, select = c("snp1","snp2"))

# import dataset
# simgeno <- read_csv(file = "./data/simpath_cohort_scramCK.csv", show_col_types = FALSE)
# I realize imp_agg has not done what i expected
load("./taxane_imp_long.RData")

gene_vars <- colnames(c("gdoseabc2", "gdoseabc3", "gdoseabc4", "gdoseabc5", "gdoseabc6", "gdoseabc7", "gdoseabc8", "gdoseabc10", "abc11", "abc12", "gdosecyp10", "gdosecyp12", "gdosecyp13", "gdosecyp14", "gdosecyp2", "gdosecyp3", "gdosecyp4", "gdosecyp5", "gdosecyp6", "gdosecyp7", "gdosecyp8", "gdosecyp9", "cyp15", "cyp16", "cyp17", "gdosesul3", "gdosesul4", "gdosesul5", "gdoseugt1", "gdoseugt2", "gdoseugt3", "gst1", "slc1", "slc2", "slc3"))

imp_agg_new <- imp_long %>%
  group_by(cpr) %>%
  summarise(across(all_of(gene_vars),
                   ~round(mean(., na.rm = TRUE), 1),
                   .names = "{col}"),
            across(!all_of(gene_vars), first, .names = "{col}")) %>% 
  ungroup()
  

# only keeping snp names we are using
simgeno <- simgeno %>%
  select(-abc10, -c(abc7:abc9), -c(cyp10:cyp14), -c(cyp6:cyp9), -sul5, -ugt2, -ugt3, -sul2)
```

#### ALPS analysis

Based on Tom's code on github. Running the prior only run in prior-only.R for now, but I wonder if it I should incorporate into just one step.

```{r}
#| label: run-alps
#| message: false
#| warning: false
#| results: hide

source(file = paste0("./ALPS/alps2.R"))
load(file = paste0("./data/cpsi_taxane.RData"))

# Set up run
ds <- simgeno %>% arrange(time)
time.var <- ds$time
status.var <- simgeno$event
dos <- ds %>%
  mutate(labid = NULL,
         time = NULL,
         event = NULL,
         X = NULL,
         xn = NULL)
dos <- t(as.matrix(dos))

# need to specify wd where output will be saved
wd <- here("output") 
set.seed(404)
# start at random spot
spot <- prior.forest[sample(nrow(prior.forest),1),]
spot.tree <- paste0("(", spot$snp1, ",", spot$snp2, ");")
curtree <- read.tree(text = spot.tree)
# starting with low number to check feasibility 
system.time(fitalps(iter = 1000,
                    initipsi = 19,
                    curtree,
                    normpotts = FALSE,
                    prioronly = FALSE,
                    lik = "coxph-ties",
                    prefix="/logs"))
```

Alright so it ran with the scrambled data and my attempt at a prior forest. The output messages show in the console but not after chunk (for now).

Next, summarize results.

```{r}
#| label: ALPS-summarize

fstree <- fread(paste0("./betaresults/logs-tree.txt"), sep = ";", header = FALSE)
fssampler <- fread(paste0("./betaresults/logs-sampler.txt"), sep = "\t", header = TRUE)
fspsi <- fread(paste0("./betaresults/logs-psi.txt"), sep = "\t", header = TRUE)
fsparameters <- fread(paste0("./betaresults/logs-tree-parameters.txt"), sep = "\t", header = TRUE)
fsthetas <- fread(paste0("./betaresults/logs-tree-thetas.txt"), sep = "\t", header = TRUE)

# check hyperparameter, looking for a spread/range 
table(fspsi$psi)

# completed iterations
niter <- nrow(fssampler)
niter

# acceptance rate for proposed changes
length(fssampler$accept[fssampler$accept == TRUE])/nrow(fssampler)

# number of internal nodes
table(fssampler$nnodes/nrow(fssampler))

# distance from prior forest
table(fssampler$distance)

# link to sampler
fstree$V2 <- NULL
fstree$treeindex <- as.numeric(substr(fstree$V1,1,regexpr('\\(', fstree$V1)-1))
fstree$tree <- substr(fstree$V1,regexpr('\\(',fstree$V1), nchar(fstree$V1))
fssamplertree <- merge(fssampler,fstree,by.x="treeindex",by.y="treeindex",all.x=T,sort=F)

# tree posteriors
treepost <- aggregate(fssamplertree$tree, by=list(fssamplertree$tree), FUN=function(x){NROW(x)})
names(treepost) <- c("tree","count")
treepost$post <- treepost$count/nrow(fssampler)
treepost$perc <- treepost$post*100
treeprior <- mean(treepost$post)
treepost$BF <- round((treepost$post/(1-treepost$post))/(treeprior/(1-treeprior)),0)
# print(treepost)
gt(treepost)
```

```{r}
#| label: posterior-odds
#| tbl-cap: "Main posterior"
text <- paste(treepost$tree,";",sep = "")
temp <- read.tree(text = text)
getlabels <- function(tree){
  return(tree$tip.label)
}

tips <- lapply(temp, getlabels)
nt <- unique(unlist(tips))
main <- matrix(0, ncol = length(nt))
names(main) <- nt
for (i in 1:nrow(treepost)){
  main[tips[[i]]] <- main[tips[[i]]] + treepost$count[i]
}
mainpost <- data.frame(count = main, post = main/niter)

# Bayes factors (BF)
mainprior <- mean(mainpost$post)
mainpost$bf <- round((mainpost$post/(1 - mainpost$post))/
                       (mainprior/(1 - mainprior)),0)

# Genetic factor marginal posteriors
# mainpost
gt(mainpost,
   rownames_to_stub = TRUE)
```

```{r}
#| tbl-cap: "Trees with BF>=1"

# parameters for any tree with BF >= 1
treepost$perc <- round(treepost$post*100)
s <- subset(treepost,BF>=1)
gt(s)

s2 <- subset(mainpost, bf >= 1)

# plot cladograms of selected tree structures
par(mfrow = c(2,2))

s3 <- data.frame(
  tree = character(),
  beta = numeric(),
  theta.1 = numeric(),
  theta.2 = numeric(),
  stringsAsFactors = FALSE
)


for (i in 1:nrow(s)) {
	# print(s$tree[i])
	ti <- min(fstree[fstree$tree == s$tree[i]]$treeindex)
	tiparam <- subset(fsparameters, treeindex == ti)
	# print(tiparam)
	tithetas <- subset(fsthetas, treeindex == ti)
	# print(tithetas)
	t <- read.tree(text = paste0(s$tree[i], ";"))
	plot(t,root.edge = TRUE, main = paste0("Posterior: ", s$perc[i], "% BF:", s$BF[i]), type = "cladogram", sub = paste0("beta=", round(tiparam$beta, 2)))
	edgelabels(round(as.vector(t(subset(tithetas, select = c("theta.1", "theta.2")))), 2))
	#par(ask=TRUE) 
	  s3 <- rbind(s3, data.frame(
    tree = s$tree[i],
    treeindex = tiparam$treeindex,
    beta = tiparam$beta,
    nnodes = tiparam$nnodes,
    negloglike = tiparam$negloglik,
    logpost = tiparam$logpost,
    distance = tiparam$distance,
    theta.1 = tithetas$theta.1,
    theta.2 = tithetas$theta.2
  ))
}

s3 %>%
  mutate(beta = round(beta, 2),
         theta.1  = round(theta.1, 2),
         theta.2  = round(theta.2, 2)) %>%
  gt()

```

So we get some trees!

```{r}
#| label: context
path <- read.csv("./data/taxane_summ.csv", header = TRUE)

path_names <- names(path)[4:8]
concept_names <- data.frame()
for (i in path_names){
  cur <- subset(path, !is.na(path[i]))
  
  concept.post <- 0
  for (j in 1:nrow(treepost)){
    test <- any(tips[[j]] %in% cur$datavar)
    if(test) {
      concept.post <- concept.post + treepost$count[j]
    }	
  }
  concept.post <- concept.post/niter
  # print(paste0("concept:", i , " posterior:", concept.post))
  concept_names <- rbind(concept_names, data.frame(
    concept = i,
    posterior = concept.post
  ))
}
gt(concept_names)
```

...and that's where the walkthrough ends! Next steps:

-   generate concept probabilities from prior-only ALPS run and then calculate prior odds (p/(1-p))

-   calculate posterior odds from posterior probabilies

-   divide posterior odds by prior odds to get Bayes factor.

```{r}
#| echo: false
#| eval: false
#| label: prior-only-run

wd <- here("betaresults") 
set.seed(404)
# start at random spot
spot <- prior.forest[sample(nrow(prior.forest),1),]
spot.tree <- paste0("(", spot$snp1, ",", spot$snp2, ");")
curtree <- read.tree(text = spot.tree)
# start with low number to test out
system.time(fitalps(iter = 100,
                    initipsi = 19,
                    curtree,
                    normpotts = FALSE,
                    prioronly = TRUE,
                    lik = "coxph-ties",
                    prefix="/prior")) # prior only run

# adding p-prefix to all output 
pfstree <- fread(paste0("./betaresults/prior-tree.txt"), sep = ";", header = FALSE)
pfssampler <- fread(paste0("./betaresults/prior-sampler.txt"), sep = "\t", header = TRUE)
pfspsi <- fread(paste0("./betaresults/prior-psi.txt"), sep = "\t", header = TRUE)
pfsparameters <- fread(paste0("./betaresults/prior-tree-parameters.txt"), sep = "\t", header = TRUE)
# no thetas produced 

# check hyperparameter
table(pfspsi$psi)

# completed iterations
pniter <- nrow(pfssampler)
pniter

# acceptance rate for proposed changes
length(pfssampler$accept[pfssampler$accept == TRUE]/pniter)

# number of internal nodes
table(pfssampler$nnodes/pniter)

# distance from prior forest
table(pfssampler$distance)

# link to sampler
pfstree$V2 <- NULL
pfstree$treeindex <- as.numeric(substr(pfstree$V1, 1, regexpr('\\(', pfstree$V1) - 1))
pfstree$tree <- substr(pfstree$V1, regexpr('\\(',pfstree$V1), nchar(pfstree$V1))
pfssamplertree <- merge(pfssampler, pfstree, by.x="treeindex", by.y="treeindex", all.x=T, sort=F)

##################################
# have not edited beyond this
# TODO continue adding p-prefix
# tree posteriors
treepost <- aggregate(fssamplertree$tree, by=list(fssamplertree$tree), FUN=function(x){NROW(x)})
names(treepost) <- c("tree","count")
treepost$post <- treepost$count/nrow(fssampler)
treepost$perc <- treepost$post*100
treeprior <- mean(treepost$post)
treepost$BF <- round((treepost$post/(1-treepost$post))/(treeprior/(1-treeprior)),0)
print(treepost)
```

### Descriptive analysis

Number of recurrences and distribution of follow up time

```{r}
#| label: descriptives
#| tbl-cap: "Events"
#| fig-cap: "Distribution of follow-up time"

# Number of events and non-events
table(simgeno$event)

# Distribution of follow-up time
summary(simgeno$time)

ggplot(simgeno, aes(x=time)) + geom_histogram(binwidth = 50) +
  theme_bw()
```

#### Conventional associations

Model 01: fully saturated model

```{r}
#| label: conventional-assoc
#| message: false
#| tbl-cap: "Reg table"
#| fig-cap: "HR"

# for plottinig
library(survminer)

model01 <- coxph(Surv(time, event) ~ (
  abc1 + abc2 + abc3 + abc4 + abc5 + abc6 + cyp1 + cyp2 + cyp3 + cyp4 + cyp5 + gst1 + slc1 + slc2 + slc3),
  ties = "breslow",
  data = simgeno)

as_gt(tbl_regression(model01))

# can further refine this 
ggforest(model01, data = simgeno)


```
