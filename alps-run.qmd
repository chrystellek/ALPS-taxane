---
title: "ALPS run"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

Project: Using ALPS for taxane metabolic pathway and breast cancer recurrence

Author: Chrystelle Kiang

Last updated: 15 October 2024

This should be run after prior-only-run.R and needs

-   ALPS file

-   the "/output" folder where prior and cpsi are saved

-   the genodata file saved from prior only

```{r}
#| echo: true
#| warning: false

# set up
library(here)
library(tidyverse)
# for ALPS:
library(ape)
library(phytools)
library(geiger)
library(data.table)
library(stringr)
# other 
library(survival)
library(ggplot2)
library(gtsummary)
library(gt)
```

### Prior forest

After discussion with Cathrine, Dee, Tore, Tom, and Tim, we have the following pathway as of end of Nov 2023. To consider *SLCO1B1* and *ABCB1* haplotypes. Most genes only have one SNP, except: *SLCO1B1* (2), *CYP3A4* (2), and *ABCB1* (4).

![](images/taxanepathway.jpg){fig-align="center"}

Have encoded the direct paths between two 'nodes'; either 1 or 2 steps (based on tam). For this project, not looking at haplotypes; could perhaps be done later but would be more involved because we don't have chromosome level info. This is created in "create prior.qmd"

```{r}
#| label: read-in
#| warning: false
#| message: false
#| results: hide

# load in necessary files
# TODO confirm these file locations
# suggestion alps2 and priorforeststructure in same folder as this file 
source(file = paste0("./SEND/alps2.R")) # ALPS files
prior.forest <- read.csv("./SEND/priorforeststructure.csv") %>% select("snp1","snp2") # prior forest

# then below, saved in a folder within this one
load(file = paste0("./output-test/cpsi_taxane.RData")) # cpsi, created in prior-only-run 

# TODO delete/modify based on MI 
genodata <- read.csv("./data/simpath_cohort_scram_tax.csv") %>%
  rename(id = cpr) %>%
    select(id, 
         abc2, abc3, abc4, abc11, abc12,
         cyp13, cyp14, cyp15, cyp16, cyp17, 
         gst1, slc1, slc2, slc3,
         event, time)
```

#### ALPS analysis

Based on Tom's code on github. Currently, have prior-only run in a separate file... could have it all in one place though?

```{r}
#| label: run-alps
#| message: false
#| warning: false
#| results: hide

# TODO for full run, may not want to print message or warnings when rendering 

# Set up run
# first sort by time
ds <- genodata %>% arrange(time)
time.var <- ds$time
status.var <- ds$event
dos <- ds %>%
  mutate(id = NULL,
         time = NULL,
         event = NULL,
         X = NULL,
         xn = NULL)
dos <- t(as.matrix(dos))

### Initialize ALPS, run on data 
# TODO file location, same as prior is fine 
wd <- here() # where output will be saved, here() this makes it same folder as this code 

set.seed(404)
# start at random spot in prior forest
spot <- prior.forest[sample(nrow(prior.forest),1),]
spot.tree <- paste0("(", spot$snp1, ",", spot$snp2, ");")
curtree <- read.tree(text = spot.tree)
# starting with lower number to check feasibility 
system.time(fitalps(iter = 1000,
                    initipsi = 19,
                    curtree,
                    normpotts = FALSE,
                    prioronly = FALSE,
                    lik = "coxph-ties",
                    prefix="/output-test/logs"))
# note that though not specified here, it requires at least psi to exist in environment (loaded from cpsi.Rdata)

```

Okay, it works! Using the randomly generated data et did not work, scrambled dataset did however.

\-\-\-\-\--

Summarize results

```{r}
#| label: ALPS-summarize
fstree <- fread(paste0("./output-test/logs-tree.txt"), sep = ";", header = FALSE)
fssampler <- fread(paste0("./output-test/logs-sampler.txt"), sep = "\t", header = TRUE)
fspsi <- fread(paste0("./output-test/logs-psi.txt"), sep = "\t", header = TRUE)
fsparameters <- fread(paste0("./output-test/logs-tree-parameters.txt"), sep = "\t", header = TRUE)
fsthetas <- fread(paste0("./output-test/logs-tree-thetas.txt"), sep = "\t", header = TRUE)

# check hyperparameter, looking for a spread/range 
table(fspsi$psi)

# completed iterations
niter <- nrow(fssampler)
niter

# acceptance rate for proposed changes
length(fssampler$accept[fssampler$accept == TRUE])/nrow(fssampler)

# number of internal nodes
table(fssampler$nnodes/nrow(fssampler))

# distance from prior forest
table(fssampler$distance)

# link to sampler
fstree$V2 <- NULL
fstree$treeindex <- as.numeric(substr(fstree$V1,1,regexpr('\\(', fstree$V1)-1))
fstree$tree <- substr(fstree$V1,regexpr('\\(',fstree$V1), nchar(fstree$V1))
fssamplertree <- merge(fssampler,fstree,by.x="treeindex",by.y="treeindex",all.x=T,sort=F)

# tree posteriors
treepost <- aggregate(fssamplertree$tree, by=list(fssamplertree$tree), FUN=function(x){NROW(x)})
names(treepost) <- c("tree","count")
treepost$post <- treepost$count/nrow(fssampler)
treepost$perc <- treepost$post*100
treeprior <- mean(treepost$post)
treepost$BF <- round((treepost$post/(1-treepost$post))/(treeprior/(1-treeprior)),0)
# print(treepost)
gt(treepost)
```

```{r}
#| label: posterior-odds
#| tbl-cap: "Main posterior"
text <- paste(treepost$tree,";",sep = "")
temp <- read.tree(text = text)
getlabels <- function(tree){
  return(tree$tip.label)
}

tips <- lapply(temp, getlabels)
nt <- unique(unlist(tips))
main <- matrix(0, ncol = length(nt))
names(main) <- nt
for (i in 1:nrow(treepost)){
  main[tips[[i]]] <- main[tips[[i]]] + treepost$count[i]
}
mainpost <- data.frame(count = main, post = main/niter)

# Bayes factors (BF)
mainprior <- mean(mainpost$post)
mainpost$bf <- round((mainpost$post/(1 - mainpost$post))/
                       (mainprior/(1 - mainprior)),0)

# Genetic factor marginal posteriors
# mainpost
gt(mainpost,
   rownames_to_stub = TRUE)
```

```{r}
#| tbl-cap: "Trees with BF>=1"

# parameters for any tree with BF >= 1
treepost$perc <- round(treepost$post*100)
s <- subset(treepost,BF>=1)
gt(s)

s2 <- subset(mainpost, bf >= 1)

# plot cladograms of selected tree structures
par(mfrow = c(2,2))

s3 <- data.frame(
  tree = character(),
  beta = numeric(),
  theta.1 = numeric(),
  theta.2 = numeric(),
  stringsAsFactors = FALSE
)


for (i in 1:nrow(s)) {
	# print(s$tree[i])
	ti <- min(fstree[fstree$tree == s$tree[i]]$treeindex)
	tiparam <- subset(fsparameters, treeindex == ti)
	# print(tiparam)
	tithetas <- subset(fsthetas, treeindex == ti)
	# print(tithetas)
	t <- read.tree(text = paste0(s$tree[i], ";"))
	plot(t,root.edge = TRUE, main = paste0("Posterior: ", s$perc[i], "% BF:", s$BF[i]), type = "cladogram", sub = paste0("beta=", round(tiparam$beta, 2)))
	edgelabels(round(as.vector(t(subset(tithetas, select = c("theta.1", "theta.2")))), 2))
	#par(ask=TRUE) 
	  s3 <- rbind(s3, data.frame(
    tree = s$tree[i],
    treeindex = tiparam$treeindex,
    beta = tiparam$beta,
    nnodes = tiparam$nnodes,
    negloglike = tiparam$negloglik,
    logpost = tiparam$logpost,
    distance = tiparam$distance,
    theta.1 = tithetas$theta.1,
    theta.2 = tithetas$theta.2
  ))
}

s3 %>%
  mutate(beta = round(beta, 2),
         theta.1  = round(theta.1, 2),
         theta.2  = round(theta.2, 2)) %>%
  gt()

```

So we get some trees!

```{r}
#| label: context

path <- read.csv("./SEND/taxane_summary.csv", header = TRUE)

path_names <- names(path)[4:8]
concept_names <- data.frame()
for (i in path_names){
  cur <- subset(path, !is.na(path[i]))
  
  concept.post <- 0
  for (j in 1:nrow(treepost)){
    test <- any(tips[[j]] %in% cur$datavar)
    if(test) {
      concept.post <- concept.post + treepost$count[j]
    }	
  }
  concept.post <- concept.post/niter
  # print(paste0("concept:", i , " posterior:", concept.post))
  concept_names <- rbind(concept_names, data.frame(
    concept = i,
    posterior = concept.post
  ))
}
gt(concept_names)
```
